---
import Layout from './Layout.astro'

import type { ImageMetadata } from "astro";

interface Props {
    choices: string[],
    reasons: string[],
    valid: string,
    subject: string,
    index: number,
    max: number,
    next: string | null,
    id: string,
    image: ImageMetadata,
    image_name: string,
}

const { choices, reasons, valid, subject, index, max, next, id, image, image_name} = Astro.props;
---

<Layout title={subject} image={image} image_name={image_name}>
    <div class="root" data-id={id}>
        <div class="flex justify-between items-start text-start w-full small">
            <small class="text-xs">Frage {index} von {max}</small>
            <a class="text-xs" href="/">x</a>
        </div>
        <h1>{subject}</h1>
        <div class="text-xl description whitespace-pre-line">
            <p>Antwort wird geladen...<br>Bitte kurz warten!</p>
        </div>
        <div class="flex flex-col gap-1 items">
            {choices.map((choice, index) => (
                    <details data-content={choice} class="text-2xl">
                        <summary data-valid={choice === valid ? "true" : "false"} data-selected="false" data-content={choice}>{choice}</summary>
                        <p class="p-3 text-xl">
                            {reasons[index]}
                        </p>
                    </details>
            ))}
        </div>
        {
            next != '/'
                ? <a class="bg-white text-black rounded-lg text-xl border border-solid border-black button" href=`/quiz/${next}`>Nächste Frage</a>
                : <a class="bg-white text-black rounded-lg text-xl border border-solid border-black button" href=`/result`>Fertig</a>
        }
    </div>
</Layout>

<style>
    .root {
        display: flex;
        flex-direction: column;
        align-items: center;
        text-align: center;

        width: 100%;

        gap: 0.45em;
    }

    .small {
        color: #656565;

        padding: 0.3em 0.5em;

        font-family: 'Space Grotesk Variable', sans-serif;
    }

    h1 {
        font-family: "Playfair Display Variable", serif;
        font-variant-caps: small-caps;
        font-size: 3.8rem;
        font-weight: 600;
        line-height: 1.2;
    }

    .description {
        font-family: 'Space Grotesk Variable', sans-serif;

        padding: 0 1em;
    }

    .items {
        max-height: 60vh;
        overflow-y: auto;
    }

    details {
        font-family: 'Space Grotesk Variable', sans-serif;

        border-radius: 12px;
        border: 1px solid black;

        text-align: start;

        width: 15.05em;

        background-color: rgb(16, 16, 16);
    }

    details[open] summary {
        border-bottom-left-radius: 0;
        border-bottom-right-radius: 0;

        border-bottom: 1px solid black;
    }

    summary {
        border-radius: 11px;

        font-weight: 500;

        padding: 0.4rem 1.2rem 0.4rem 1.2rem;
    }

    summary[data-valid="true"] {
        background-color: rgb(0, 50, 0);
    }

    summary[data-valid="true"][data-selected="true"] {
        background-color: rgb(0, 135, 0);
    }

    summary[data-valid="false"] {
        background-color: rgb(50, 0, 0);
    }

    summary[data-valid="false"][data-selected="true"] {
        background-color: rgb(135, 0, 0);
    }

    .button {
        user-select: none;

        padding: 0.4rem 1.2rem 0.4rem 1.2rem;

        font-family: 'Space Grotesk Variable', sans-serif;
    }

    .button:active {
        transform: scale(0.95);
        background-color: #dadada;
    }
</style>

<script>
    let rootDiv = document.querySelector(".root") as HTMLDivElement;
    let selected: string = JSON.parse(localStorage.getItem(rootDiv.dataset.id as string) as string)["content"];

    let summary = (document.querySelector(`summary[data-content="${selected}"]`)) as HTMLElement;

    summary.setAttribute("data-selected", "true");
    (document.querySelector(`details[data-content="${selected}"]`) as HTMLDetailsElement).open = true;

    if (summary.dataset.valid === "true") {
        document.querySelector(`.description p`)!.textContent = "Deine Antwort war richtig!\nWeiter so!";
    } else {
        document.querySelector(`.description p`)!.textContent = "Deine Antwort war leider falsch. Nächstes Mal klappt es bestimmt!";
    }
</script>